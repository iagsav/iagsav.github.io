
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R -- это свободное ПО, и оно поставляется безо всяких гарантий.
Вы вольны распространять его при соблюдении некоторых условий.
Введите 'license()' для получения более подробной информации.

R -- это проект, в котором сотрудничает множество разработчиков.
Введите 'contributors()' для получения дополнительной информации и
'citation()' для ознакомления с правилами упоминания R и его пакетов
в публикациях.

Введите 'demo()' для запуска демонстрационных программ, 'help()' -- для
получения справки, 'help.start()' -- для доступа к справке через браузер.
Введите 'q()', чтобы выйти из R.

> # значит так. теперь надо пройтись по каталогам и для каждого изображения сгенерировать
> # многоуровневые описания отдельно для фильтров, полных и замкнутых групп.
> # потом эти описания будут использоваться во всех моделях памяти
> 
> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 215500 11.6     460000 24.6   350000 18.7
Vcells 315001  2.5     786432  6.0   785476  6.0
> 
> load('fo.rdata')
> load('fullGrp.rdata')
> load('clsGrp.rdata')
> 
> source("buildDec.R")
> #source("imread.R")
> source("buildUimg.R")
> source("getfullGroup.R")
> source("getclosedGroup.R")
> 
> # каталог с файлами изображений
> #procdir <- '/home/vgai/images/tmp/'
> procdir <- '/home/vgai/result/'
> 
> # считываем список файлов
> #fls <- list.files(procdir, pattern = "\\.jpg$", ignore.case = TRUE)
> load('fls.rdata')
> 
> library(foreach)
> library(doMC)
Загрузка требуемого пакета: iterators
Загрузка требуемого пакета: parallel
> registerDoMC(14)  #change the 2 to your number of CPU cores  
> 
> N <- 5 # число уровней разложени, тогда размер сегмента будет 64.
> 
> system.time(foreach(j = 1:length(fls), .packages = 'jpeg') %dopar%
+ #system.time(foreach(j = 1:4, .packages = 'jpeg') %dopar%
+ {
+   dec <- buildDec(readJPEG(paste(procdir, fls[[j]], sep = "")), N, flt, oper)
+   save(dec, file = paste(procdir, fls[[j]], 'FL.rdata', sep = ""))
+   
+   decFG <- list(list(0))
+   for (i in (1:(N + 1)))
+   {
+     decFG[[i]] <- list(0);
+     for (k in 1:length(dec[[i]]))
+     {
+       decFG[[i]][[k]] <- getfullGroup(unlist(dec[[i]][[k]][[1]]), fullGrp, unlist(dec[[i]][[k]][[2]]), oper)
+     }
+   }
+   save(decFG, file = paste(procdir, fls[[j]], 'FG.rdata', sep = ""))
+   
+   
+   decCG <- list(list(0))
+   for (i in (1:(N + 1)))
+   {
+     decCG[[i]] <- list(0);
+     for (k in 1:length(dec[[i]]))
+     {
+       decCG[[i]][[k]] <- getclosedGroup(unlist(dec[[i]][[k]][[1]]), clsGrp, unlist(dec[[i]][[k]][[2]]), oper)
+     }
+   }
+   save(decCG, file = paste(procdir, fls[[j]], 'CG.rdata', sep = ""))
+ })
JPEG decompression: Premature end of JPEG fileJPEG decompression: Premature end of JPEG fileJPEG decompression: Premature end of JPEG fileJPEG decompression: Premature end of JPEG fileJPEG decompression: Premature end of JPEG fileJPEG decompression: Premature end of JPEG fileJPEG decompression: Premature end of JPEG fileJPEG decompression: Corrupt JPEG data: premature end of data segmentJPEG decompression: Premature end of JPEG fileJPEG decompression: Premature end of JPEG fileJPEG decompression: Premature end of JPEG fileJPEG decompression: Premature end of JPEG fileJPEG decompression: Premature end of JPEG fileJPEG decompression: Corrupt JPEG data: premature end of data segmentJPEG decompression: Corrupt JPEG data: premature end of data segmentJPEG decompression: Corrupt JPEG data: premature end of data segmentJPEG decompression: Corrupt JPEG data: premature end of data segmentJPEG decompression: Corrupt JPEG data: premature end of data segmentJPEG decompression: Premature end of JPEG fileпользователь      система       прошло 
  404620.962     5225.512    32308.951 
> 
> proc.time()
пользователь      система       прошло 
  404621.340     5225.538    32309.336 
