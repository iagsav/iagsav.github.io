#   save(decFG, file = paste(procdir, fls[[j]], 'FG.rdata', sep = ""))
#
#
#   decCG <- list(list(0))
#   for (i in (1:(N + 1)))
#   {
#     decCG[[i]] <- list(0);
#     for (k in 1:length(dec[[i]]))
#     {
#       decCG[[i]][[k]] <- getclosedGroup(unlist(dec[[i]][[k]][[1]]), clsGrp, unlist(dec[[i]][[k]][[2]]), oper)
#     }
#   }
#   save(decCG, file = paste(procdir, fls[[j]], 'CG.rdata', sep = ""))
})
dec2 <- dec
sort(dec1[[1]][[1]][[1]][1:15], index.return = TRUE)
sort(dec2[[1]][[1]][[1]][1:15], index.return = TRUE)
dec2[[1]][[1]][[1]][16]
dec1[[1]][[1]][[1]][16]
# формирование списка каталогов для сервера
prefserv <- '/home/vgai/'
dirnames <- matrix('', 1, 50)
for (i in 1:50)
{
dirnames[i] <- paste(prefserv, i, sep = "")
print(dirnames[i])
}
# формирование списка каталогов для сервера
prefserv <- '/home/vgai/'
dirnames <- matrix('', 1, 50)
for (i in 1:50)
{
dirnames[i] <- paste(prefserv, 'images', i, sep = "")
print(dirnames[i])
}
# формирование списка каталогов для сервера
#prefserv <- '/home/vgai/'
prefserv <- '/home/vgai/'
resultdir <- ''
Ndir <- 3
dirnames <- matrix('', 1, Ndir)
for (i in 1:Ndir)
{
dirnames[i] <- paste(prefserv, 'images', i, sep = "")
print(dirnames[i])
}
# сгенерировать 10000, ..., 50000 уникальных чисел из всего массива.
for (i in 1:Ndir)
{
}
# сгенерировать новое имя для каждого изображения: добавить в начало число от 1 до ...
# количества изображений во всех папках
# потом надо все изображения в одну папку скопировать.
# формирование списка каталогов для сервера
#prefserv <- '/home/vgai/'
prefserv <- '/home/vgai/'
resultdir <- ''
Ndir <- 3
dirnames <- matrix('', 1, Ndir)
for (i in 1:Ndir)
{
dirnames[i] <- paste(prefserv, 'images', i, sep = "")
print(dirnames[i])
}
# сгенерировать 10000, ..., 50000 уникальных чисел из всего массива.
for (i in 1:Ndir)
{
}
# сгенерировать новое имя для каждого изображения: добавить в начало число от 1 до ...
# количества изображений во всех папках
# потом надо все изображения в одну папку скопировать.
# формирование списка каталогов для сервера
#prefserv <- '/home/vgai/'
prefserv <- 'd:/Temp/'
resultdir <- 'd:/Temp/result/'
Ndir <- 3
dirnames <- matrix('', 1, Ndir)
for (i in 1:Ndir)
{
dirnames[i] <- paste(prefserv, 'images', i, sep = "")
print(dirnames[i])
# определяем количество изображений в каталоге
#flsDir <- list.files(procdir, pattern = "\\.jpg$", ignore.case = TRUE)
}
# сгенерировать 10000, ..., 50000 уникальных чисел из всего массива.
for (i in 1:Ndir)
{
}
# сгенерировать новое имя для каждого изображения: добавить в начало число от 1 до ...
# количества изображений во всех папках
# потом надо все изображения в одну папку скопировать.
fileAm <- 0
for (i in 1:1)
{
dirnames[i] <- paste(prefserv, 'images', i, '/', sep = "")
print(dirnames[i])
# определяем количество изображений в каталоге
flsDir <- list.files(dirnames[i], pattern = "\\.jpg$", ignore.case = TRUE)
}
dim(flsDir)
size(flsDir)
length(flsDir)
for (i in 1:Ndir)
{
dirnames[i] <- paste(prefserv, 'images', i, '/', sep = "")
print(dirnames[i])
# определяем количество изображений в каталоге
flsDir <- list.files(dirnames[i], pattern = "\\.jpg$", ignore.case = TRUE)
fileAm <- fileAm + length(flsDir)
}
# формирование списка каталогов для сервера
#prefserv <- '/home/vgai/'
prefserv <- 'd:/Temp/'
resultdir <- 'd:/Temp/result/'
Ndir <- 3
dirnames <- matrix('', 1, Ndir)
fileAm <- 0
for (i in 1:Ndir)
{
dirnames[i] <- paste(prefserv, 'images', i, '/', sep = "")
print(dirnames[i])
# определяем количество изображений в каталоге
flsDir <- list.files(dirnames[i], pattern = "\\.jpg$", ignore.case = TRUE)
fileAm <- fileAm + length(flsDir)
}
# переименовываем изображения
ind <- 0
for (i in 1:Ndir)
{
# определяем количество изображений в каталоге
flsDir <- list.files(dirnames[i], pattern = "\\.jpg$", ignore.case = TRUE)
for (j in 1:length(flsDir))
{
newname = paste(resultdir, ind, flsDir[j], sep = "")
print(newname)
}
}
# сгенерировать 10000, ..., 50000 уникальных чисел из всего массива.
for (i in 1:Ndir)
{
}
# сгенерировать новое имя для каждого изображения: добавить в начало число от 1 до ...
# количества изображений во всех папках
# потом надо все изображения в одну папку скопировать.
# формирование списка каталогов для сервера
#prefserv <- '/home/vgai/'
prefserv <- 'd:/Temp/'
resultdir <- 'd:/Temp/result/'
Ndir <- 3
dirnames <- matrix('', 1, Ndir)
fileAm <- 0
for (i in 1:Ndir)
{
dirnames[i] <- paste(prefserv, 'images', i, '/', sep = "")
print(dirnames[i])
# определяем количество изображений в каталоге
flsDir <- list.files(dirnames[i], pattern = "\\.jpg$", ignore.case = TRUE)
fileAm <- fileAm + length(flsDir)
}
# переименовываем изображения
ind <- 0
for (i in 1:Ndir)
{
# определяем количество изображений в каталоге
flsDir <- list.files(dirnames[i], pattern = "\\.jpg$", ignore.case = TRUE)
for (j in 1:length(flsDir))
{
newname = paste(resultdir, ind, flsDir[j], sep = "")
print(newname)
ind <- ind + 1
}
}
# сгенерировать 10000, ..., 50000 уникальных чисел из всего массива.
for (i in 1:Ndir)
{
}
# сгенерировать новое имя для каждого изображения: добавить в начало число от 1 до ...
# количества изображений во всех папках
# потом надо все изображения в одну папку скопировать.
# формирование списка каталогов для сервера
#prefserv <- '/home/vgai/'
prefserv <- 'd:/Temp/'
resultdir <- 'd:/Temp/result/'
Ndir <- 3
dirnames <- matrix('', 1, Ndir)
fileAm <- 0
for (i in 1:Ndir)
{
dirnames[i] <- paste(prefserv, 'images', i, '/', sep = "")
print(dirnames[i])
# определяем количество изображений в каталоге
flsDir <- list.files(dirnames[i], pattern = "\\.jpg$", ignore.case = TRUE)
fileAm <- fileAm + length(flsDir)
}
# переименовываем изображения
ind <- 0
for (i in 1:Ndir)
{
# определяем количество изображений в каталоге
flsDir <- list.files(dirnames[i], pattern = "\\.jpg$", ignore.case = TRUE)
for (j in 1:length(flsDir))
{
newname <- paste(resultdir, ind, flsDir[j], sep = "")
oldname <- paste(dirnames[i], flsDir[j], sep = "")
print(newname)
print(oldname)
ind <- ind + 1
}
}
# сгенерировать 10000, ..., 50000 уникальных чисел из всего массива.
for (i in 1:Ndir)
{
}
# сгенерировать новое имя для каждого изображения: добавить в начало число от 1 до ...
# количества изображений во всех папках
# потом надо все изображения в одну папку скопировать.
# формирование списка каталогов для сервера
#prefserv <- '/home/vgai/'
prefserv <- 'd:/Temp/'
resultdir <- 'd:/Temp/result/'
Ndir <- 3
dirnames <- matrix('', 1, Ndir)
for (i in 1:Ndir)
{
dirnames[i] <- paste(prefserv, 'images', i, '/', sep = "")
print(dirnames[i])
# определяем количество изображений в каталоге
flsDir <- list.files(dirnames[i], pattern = "\\.jpg$", ignore.case = TRUE)
}
# переименовываем изображения
ind <- 0
for (i in 1:Ndir)
{
# определяем количество изображений в каталоге
flsDir <- list.files(dirnames[i], pattern = "\\.jpg$", ignore.case = TRUE)
for (j in 1:length(flsDir))
{
newname <- paste(resultdir, ind, flsDir[j], sep = "")
oldname <- paste(dirnames[i], flsDir[j], sep = "")
file.copy(oldname, newname)
print(newname)
print(oldname)
ind <- ind + 1
}
}
# сгенерировать 10000, ..., 50000 уникальных чисел из всего массива.
# сгенерировать новое имя для каждого изображения: добавить в начало число от 1 до ...
# количества изображений во всех папках
# потом надо все изображения в одну папку скопировать.
sample.int(100, 10)
sample.int(100, 10)
sample.int(100, 10)
sample.int(100, 100)
sort(sample.int(100, 100))
sort(sample.int(100, 101))
sort(sample.int(100, 100))
MyNorm = function(data)
{
data <- data - min(data)
data <- data / max(data)
}
# поиск изображения в дереве + функции по искажению изображения
library(data.tree)
library(jpeg)
source("buildDec.r")
source("buildUimg.r")
source("imshow.r")
procdir <- 'd:/Temp/'
fls <- list.files(procdir, pattern = "\\.jpg$", ignore.case = TRUE)
# индекс искомого изображения
imInd <- 744
img <- readJPEG(paste(procdir, fls[[imInd]], sep = ""))
load('fo.rdata')
N <- 3
if (length(dim(img)) == 3)
{
img <- img[,,1] + img[,,2] + img[,,3];
img <- img / 3;
}
# нормализация изображения по амплитуде к [0; 1]
img <- MyNorm(img)
# формирование искажённого изображения
#img <- img + runif(prod(dim(img)), 0, 0.5)
#dimg <- img + rnorm(prod(dim(img)), 0, 0.5)
dimg <- MyNorm(img)
imshow(dimg)
ddec <- buildDec(img, N, flt, oper)
# поиск изображения в базе
rind <- c()
for (j in 1:N)
{
# определяем максимум на j-ом уровне по каким-то своим признакам
tmp <- matrix(0, length(ddec[[j]]), 15)
for (k in 1:length(ddec[[j]]))
{
tmp[k,] <- ddec[[j]][[k]][[1]][1:15]
}
imax <- which(abs(tmp) == max(abs(tmp)), arr.ind = TRUE)
iind <- imax[2]
if (tmp[imax] < 0)
{
iind <- iind + 15
}
# iind - адрес узла на i-ом уровне разложения
rind <- c(rind, iind)
}
pref <- "imTree"
for (j in 1:length(rind))
{
pref <- paste(pref, sprintf('$children[[%d]]', rind[j]) ,sep = "")
}
commStr <- paste(pref, "$myData", sep = "")
# предварительный список изображений
imList <- eval(parse(text = commStr))
# сначала надо загрузить описания предварительно найденных файлов
flsdec <- list.files(procdir, pattern = "\\FL.rdata$", ignore.case = TRUE)
flsdec <- flsdec[imList]
ldec <- list(0)
for (i in 1:length(flsdec))
{
# сюда нужен код
load(paste(procdir, flsdec[i], sep = ""))
ldec[[i]] <- dec
}
# окончательный поиск изображения
imDiff <- c()
for (i in 1:length(imList))
{
# сюда нужен код
imDiff[i] <- sum(abs(ddec[[1]][[1]][[1]] - ldec[[i]][[1]][[1]][[1]]))
}
imax <- which(abs(imDiff) == min(abs(imDiff)), arr.ind = TRUE)
print(paste(imList[imax], imInd))
dec1[[1]]
dec1[[2]]
ldec
ldec[[2]]
rm(list = ls())
library(jpeg)
library(foreach)
source("myimagenoise.R")
source("buildDec.R")
source("buildUimg.R")
source("imshow.R")
source("getfullGroup.R")
source("getclosedGroup.R")
load('fls.rdata')
load('flsdec.rdata')
load('fo.rdata')
load('fullGrp.rdata')
procdir <- '/home/vgai/result/'
#procdir <- 'd:/Temp/'
#fls <- list.files(procdir, pattern = "\\.jpg$", ignore.case = TRUE)
type <- 1
noise <- 1:3
par1 <- expand.grid(type, noise)
type <- 2
scaleind1 <- 1:length(c(seq(10, 100, 20)))
par2 <- expand.grid(type, scaleind1)
type <- 3
scaleind1 <- 1:length(c(seq(0.3, 0.9, 0.3), seq(1.1, 2, 0.4), seq(0.3, 0.9, 0.3), seq(1.1, 2, 0.4)))
par3 <- expand.grid(type, scaleind1)
type <- 4
angleind <- 1:length(seq(from = 1, to = 9, by = 1))
par4 <- expand.grid(type, angleind)
type <- 5
spotsize <- 1:length(seq(from = 0.05, to = 0.4, by = 0.1))
par5 <- expand.grid(type, spotsize)
par <- rbind(par1, par2, par3, par4, par5)
###
library(doMC)
registerDoMC(14)  #change the 2 to your number of CPU cores  
imIndxs = seq(from = 1, to = length(fls), by = 100)
foreach(mz = 1:length(imIndxs), .packages = 'jpeg') %dopar%
{
  imIndx <- imIndxs[mz]
  print(imIndx)
  
  img <- readJPEG(paste(procdir, fls[[imIndx]], sep = ""))
  
  if (length(dim(img)) == 3)
  {
    img <- img[,,1] + img[,,2] + img[,,3];
    img <- img / 3;
  }  
  
  result <- matrix(0, 2, dim(par)[1])
  for (i in 1:dim(par)[1])
  {
    dimg <- myimagenoise(img, par[i, 1], par[i, 2], procdir, fls[[imIndx]])
    # for N-ary tree
    if ((model_type == 7) || (model_type == 1) || (model_type == 4))
    {
      Nx <- 3
      Levx <- 3
    }
    
    if (model_type %in% seq(form = 10, to = 18, by = 1))
    {
      if (par[i, 1] == 3)
      {
        Nx   <- dimg[[2]]
        Levx <- dimg[[3]]
        dimg <- dimg[[1]]
      } else {
        Nx <- 5
        Levx <- 5
      }
    }
    
    N <- Nx
    
    dec <- buildDec(dimg, N, flt, oper)
    
    decFG <- list(list(0))
    for (i in (1:(N + 1)))
    {
      decFG[[i]] <- list(0)
      for (k in 1:length(dec[[i]]))
      {
        decFG[[i]][[k]] <- getfullGroup(unlist(dec[[i]][[k]][[1]]), fullGrp, unlist(dec[[i]][[k]][[2]]), oper)
      }
    }
    
    decCG <- list(list(0))
    for (i in (1:(N + 1)))
    {
      decCG[[i]] <- list(0)
      for (k in 1:length(dec[[i]]))
      {
        decCG[[i]][[k]] <- getclosedGroup(unlist(dec[[i]][[k]][[1]]), clsGrp, unlist(dec[[i]][[k]][[2]]), oper)
      }
    }    
    
    save(dec, decFG, decCG, Nx, Levx, file = paste(procdir, fls[[imIndx]], i, 'noised.rdata', sep = ""))
    
    print(paste(imIndx, i))
  }
}
foreach(mz = 1:length(imIndxs), .packages = 'jpeg') %dopar%
{
  imIndx <- imIndxs[mz]
  print(imIndx)
  
  img <- readJPEG(paste(procdir, fls[[imIndx]], sep = ""))
  
foreach(mz = 1:length(imIndxs), .packages = 'jpeg') %dopar%
{
  imIndx <- imIndxs[mz]
  print(imIndx)
  
  img <- readJPEG(paste(procdir, fls[[imIndx]], sep = ""))
  
  if (length(dim(img)) == 3)
  {
    img <- img[,,1] + img[,,2] + img[,,3];
    img <- img / 3;
  }  
  
  result <- matrix(0, 2, dim(par)[1])
  for (i in 1:dim(par)[1])
  {
    dimg <- myimagenoise(img, par[i, 1], par[i, 2], procdir, fls[[imIndx]])
    # for N-ary tree
    if ((model_type == 7) || (model_type == 1) || (model_type == 4))
    {
      Nx <- 3
      Levx <- 3
    }
    
    if (model_type %in% seq(form = 10, to = 18, by = 1))
    {
      if (par[i, 1] == 3)
      {
        Nx   <- dimg[[2]]
        Levx <- dimg[[3]]
        dimg <- dimg[[1]]
      } else {
        Nx <- 5
        Levx <- 5
      }
    }
    
    N <- Nx
    
    dec <- buildDec(dimg, N, flt, oper)
    
    decFG <- list(list(0))
    for (i in (1:(N + 1)))
    {
      decFG[[i]] <- list(0)
      for (k in 1:length(dec[[i]]))
      {
        decFG[[i]][[k]] <- getfullGroup(unlist(dec[[i]][[k]][[1]]), fullGrp, unlist(dec[[i]][[k]][[2]]), oper)
      }
    }
    
    decCG <- list(list(0))
    for (i in (1:(N + 1)))
    {
      decCG[[i]] <- list(0)
      for (k in 1:length(dec[[i]]))
      {
        decCG[[i]][[k]] <- getclosedGroup(unlist(dec[[i]][[k]][[1]]), clsGrp, unlist(dec[[i]][[k]][[2]]), oper)
      }
    }    
    
    save(dec, decFG, decCG, Nx, Levx, file = paste(procdir, fls[[imIndx]], i, 'noised.rdata', sep = ""))
    
    print(paste(imIndx, i, sep = ":"))
  }
}
